{"ast":null,"code":"var _s = $RefreshSig$();\n// react-query\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\n// util\n\n// redux\n\n// api\nimport { PortfolioCommentAPI } from '../api/client';\nconst {\n  postPortfolioComment\n} = PortfolioCommentAPI;\nexport const usePostPortfolioComment = userId => {\n  _s();\n  const queryClient = useQueryClient();\n  const {\n    mutate: postComment\n  } = useMutation({\n    // 위 타입을 지정해줘야 함!\n    mutationFn: postPortfolioComment,\n    onSuccess: () => {\n      console.log('일단 호출');\n      // * setData로 특정 id에 해당 하는 데이터 사전 처리도 가능할듯!\n      queryClient.invalidateQueries(['comment']);\n    },\n    onError: error => {\n      // *: error 헨들링 하기\n      console.log(error);\n    }\n  });\n  const postCommentAction = (portfolioId, content) => {\n    // if (userId === undefined) {\n    //   alert('로그인 하세요!');\n    // } else {\n    // }\n    postComment({\n      userId,\n      portfolioId,\n      content\n    });\n  };\n  return {\n    postCommentAction\n  };\n};\n_s(usePostPortfolioComment, \"O0BKodjUXSLmWYYptycM3DjlNes=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useMutation","useQueryClient","PortfolioCommentAPI","postPortfolioComment","usePostPortfolioComment","userId","_s","queryClient","mutate","postComment","mutationFn","onSuccess","console","log","invalidateQueries","onError","error","postCommentAction","portfolioId","content"],"sources":["D:/Users/hoinlee/Desktop/HOIN/codestates/main-project/seb43_main_001/client/src/hooks/usePostPortfolioComment.ts"],"sourcesContent":["// react-query\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\r\n\r\n// util\r\nimport { getUserIdFromAccessToken } from '../utils/getUserIdFromAccessToken';\r\n\r\n// redux\r\nimport { useAppSelector } from './reduxHook';\r\n\r\n// api\r\nimport { PortfolioCommentAPI } from '../api/client';\r\n\r\nconst { postPortfolioComment } = PortfolioCommentAPI;\r\n\r\nexport const usePostPortfolioComment = (userId: number) => {\r\n  const queryClient = useQueryClient();\r\n\r\n  const { mutate: postComment } = useMutation({\r\n    // 위 타입을 지정해줘야 함!\r\n    mutationFn: postPortfolioComment,\r\n    onSuccess: () => {\r\n      console.log('일단 호출');\r\n      // * setData로 특정 id에 해당 하는 데이터 사전 처리도 가능할듯!\r\n      queryClient.invalidateQueries(['comment']);\r\n    },\r\n    onError: (error) => {\r\n      // *: error 헨들링 하기\r\n      console.log(error);\r\n    },\r\n  });\r\n  const postCommentAction = (portfolioId: number, content: string) => {\r\n    // if (userId === undefined) {\r\n    //   alert('로그인 하세요!');\r\n    // } else {\r\n    // }\r\n    postComment({ userId, portfolioId, content });\r\n  };\r\n  return { postCommentAction };\r\n};\r\n"],"mappings":";AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,uBAAuB;;AAEnE;;AAGA;;AAGA;AACA,SAASC,mBAAmB,QAAQ,eAAe;AAEnD,MAAM;EAAEC;AAAqB,CAAC,GAAGD,mBAAmB;AAEpD,OAAO,MAAME,uBAAuB,GAAIC,MAAc,IAAK;EAAAC,EAAA;EACzD,MAAMC,WAAW,GAAGN,cAAc,CAAC,CAAC;EAEpC,MAAM;IAAEO,MAAM,EAAEC;EAAY,CAAC,GAAGT,WAAW,CAAC;IAC1C;IACAU,UAAU,EAAEP,oBAAoB;IAChCQ,SAAS,EAAEA,CAAA,KAAM;MACfC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACpB;MACAN,WAAW,CAACO,iBAAiB,CAAC,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC;IACDC,OAAO,EAAGC,KAAK,IAAK;MAClB;MACAJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IACpB;EACF,CAAC,CAAC;EACF,MAAMC,iBAAiB,GAAGA,CAACC,WAAmB,EAAEC,OAAe,KAAK;IAClE;IACA;IACA;IACA;IACAV,WAAW,CAAC;MAAEJ,MAAM;MAAEa,WAAW;MAAEC;IAAQ,CAAC,CAAC;EAC/C,CAAC;EACD,OAAO;IAAEF;EAAkB,CAAC;AAC9B,CAAC;AAACX,EAAA,CAxBWF,uBAAuB;EAAA,QACdH,cAAc,EAEFD,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}