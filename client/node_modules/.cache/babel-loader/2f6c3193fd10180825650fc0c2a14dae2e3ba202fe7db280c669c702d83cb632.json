{"ast":null,"code":"// axios\nimport axios from 'axios';\n\n// util\nimport { getNewAccessToken } from '../utils/getAccessToken';\n\n// types\n\n// redux\nimport { loginState, access, refresh, setAccessToken } from '../store/slice/loginSlice';\nimport store from '../store';\n\n// ? 변수 선언 말고 바로 넣는 게 보안상 더 좋으려나?\n\nconst REFRESH_URL = ''; // refresh URL을 새롭게 추가를 해야 한다.\n// ! nontoken은 제외\nconst noneTokenClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL\n});\nconst tokenClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL\n});\n// *: 요청하는 상태에 따라서 무조건 토큰을 담아서 보낸다.\n\nconst isLogin = loginState(store.getState());\nconst accessToken = access(store.getState());\nconst refreshToken = refresh(store.getState());\ntokenClient.interceptors.request.use(config => {\n  // * :요청 헤더가 있으면 기존의 것을 반환하고 없으면 아래 처럼 새롭게 지정해준다.\n  // !login 상태가 아니면 그냥 일반 헤더 반환\n  // !login 상태면 아래와 같이 그냥 진행\n  if (!config.headers || !isLogin) {\n    return config;\n  }\n  // REFRESH_URL 기준으로 분류 처리를\n  if (config.url === REFRESH_URL) {\n    config.headers.Authorization = `${accessToken}`;\n  } else {\n    config.headers.Authorization = `${refreshToken}`;\n  }\n  return config;\n});\n\n// *: token을 사용하는 response 설정\ntokenClient.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n  // !판단 기준은 state.login에 토큰이 있냐 없냐로 판별해라\n  // !로그인을 안 했을 때의 401은 그냥 reject(Promise)를 반환해라!\n\n  // Login 상태가 아닐 때는 그냥 error을 반환하는 형식\n  if (!isLogin && error.response.status === 401) {\n    return Promise.reject(error);\n  }\n\n  // originalRequest._retry은 재시도 여부를 나타낸다(계속 요청하는 loop를 방지하기 위해)\n  if (error.response.status === 401 && originalRequest && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // refreshToken을 이용해 새로운 accessToken 발급\n      const {\n        accessToken\n      } = await getNewAccessToken();\n\n      // 새롭게 발급 받은 accessToken을 로컬 스토리지에 저장하기\n      store.dispatch(setAccessToken(accessToken));\n\n      // *:새롭게 받은 accessToken을 다시 기존의 요청 헤더 권한에 부여\n      originalRequest.headers.authorization = `${accessToken}`;\n\n      // 실패했던 원래 요청에 대해 다시 요청을 보낸다.\n      return await axios(originalRequest);\n    } catch (error) {\n      // refreshToken으로 accessToken 발급을 실패한 경우\n      console.log('Error in getNewAccessToken: ', error);\n      // 로그아웃 처리 등의 작업을 한다. 발급 실패를 했으니 어떻게 해야 하나?\n      // 에러 페이지로 전환을 해야 할까?\n    }\n  }\n\n  return Promise.reject(error);\n});\n\n// *: token을 사용하지 않는 response 설정\nnoneTokenClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  const errorResponse = {\n    ...error.response.data\n  };\n  return Promise.reject(errorResponse);\n});\nexport const userAPI = {};\nexport const PortfolioAPI = {\n  getPortfolio: async portfolioId => {\n    const PortfolioData = await axios.get(`${process.env.REACT_APP_API_URL}/portfolios/${portfolioId}`);\n    return PortfolioData.data.data;\n  }\n};\nexport const PortfolioCommentAPI = {\n  getPortfolioComment: async portfolioId => {\n    const commentData = await tokenClient.get(`${process.env.REACT_APP_API_URL}/api/portfoliocomments/portfolios/${portfolioId}`);\n    return commentData.data.data;\n  },\n  postPortfolioComment: async _ref => {\n    let {\n      userId,\n      portfolioId,\n      content\n    } = _ref;\n    return await tokenClient.post(`${process.env.REACT_APP_API_URL}/api/portfoliocomments`, {\n      userId,\n      portfolioId,\n      content\n    });\n  },\n  patchPortfolioComment: async _ref2 => {\n    let {\n      portfolioCommentId,\n      userId,\n      portfolioId,\n      content\n    } = _ref2;\n    return await tokenClient.patch(`${process.env.REACT_APP_API_URL}/api/portfoliocomments/${portfolioCommentId}`, {\n      portfolioCommentId,\n      userId,\n      portfolioId,\n      content\n    });\n  },\n  deletePortfolioComment: async _ref3 => {\n    let {\n      portfolioCommentId\n    } = _ref3;\n    return await tokenClient.delete(`${process.env.REACT_APP_API_URL}/api/portfoliocomments/${portfolioCommentId}`);\n  }\n};\n\n// UserComponents\nexport const UserProfileAPI = {\n  getUserProfile: async userId => {\n    // ! : 실제 사용을 할 때는 /users/1/profile\n    const userProfileData = await tokenClient.get(`${process.env.REACT_APP_API_URL}/users/${userId}/profile`\n    // 'http://43.201.157.191:8080/users/1/profile',\n    );\n\n    console.log(userProfileData);\n    return userProfileData.data.data;\n  },\n  patchUserProfile: async _ref4 => {\n    let {\n      userId,\n      name,\n      profileImg,\n      gitLink,\n      blogLink,\n      jobStatus,\n      about\n    } = _ref4;\n    // http://localhost:8080/users/1\n    await axios.patch(`${process.env.REACT_APP_API_URL}/users/${userId}`, {\n      name,\n      profileImg,\n      gitLink,\n      blogLink,\n      jobStatus,\n      about\n    });\n  },\n  deleteUserProfile: async userId => {\n    await axios.delete(`${process.env.REACT_APP_API_URL}/users/${userId}`);\n  }\n};\nexport const UserPortfolioAPI = {\n  getUserPortfolio: async userId => {\n    // ! : 실제 작동할 때는 위 api 링크 사용\n    const userPortfoliosData = await tokenClient.get(`${process.env.REACT_APP_API_URL}/users/${userId}/portfolio?page=1&size=15&order=asc&sort=createdAt`\n    // `${process.env.REACT_APP_API_URL}/portfolio`,\n    );\n\n    return userPortfoliosData.data.data;\n  }\n};\nexport const UserCommentsAPI = {\n  getUserComments: async userId => {\n    // http://localhost:8080/api/usercomments/users/1?page=1&size=10\n    const userCommentsData = await axios.get(`${process.env.REACT_APP_API_URL}/api/usercomments/users/${userId}?page=1&size=10`);\n    return userCommentsData.data.data;\n  },\n  // * : 한 유저가 다른 사람의 포트폴리에 작성한 댓글\n  getCommentsToPortfolio: async userId => {\n    // http://localhost:8080/api/portfoliocomments/users/1\n    const commentsToPortfolioData = await axios.get(`${process.env.REACT_APP_API_URL}/api/portfoliocomments/users/${userId}`);\n    return commentsToPortfolioData.data.data;\n  },\n  // * : 한 유저가 다른 사람에게 작성한 댓글\n  getCommentsToUser: async userId => {\n    // http://localhost:8080/api/usercomments/writers/2?page=1&size=10\n    const commentsToUserData = await axios.get(`${process.env.REACT_APP_API_URL}/api/usercomments/writers/${userId}?page=1&size=10`);\n    return commentsToUserData.data.data;\n  },\n  // ! : 전달되는게 어떤 id값인지 확인 필요\n  deleteUserComment: async userCommentId => {\n    // http://localhost:8080/api/usercomments/1\n    await axios.delete(`${process.env.REACT_APP_API_URL}/api/usercomments/${userCommentId}`);\n  },\n  deletePortfolioComment: async portfolioCommentId => {\n    // http://localhost:8080/api/portfoliocomments/2\n    await axios.delete(`${process.env.REACT_APP_API_URL}/api/portfoliocomments/${portfolioCommentId}`);\n  }\n};\nexport const UserCommentAPI = {};\nexport { tokenClient, noneTokenClient };","map":{"version":3,"names":["axios","getNewAccessToken","loginState","access","refresh","setAccessToken","store","REFRESH_URL","noneTokenClient","create","baseURL","process","env","REACT_APP_API_URL","tokenClient","isLogin","getState","accessToken","refreshToken","interceptors","request","use","config","headers","url","Authorization","response","error","originalRequest","status","Promise","reject","_retry","dispatch","authorization","console","log","errorResponse","data","userAPI","PortfolioAPI","getPortfolio","portfolioId","PortfolioData","get","PortfolioCommentAPI","getPortfolioComment","commentData","postPortfolioComment","_ref","userId","content","post","patchPortfolioComment","_ref2","portfolioCommentId","patch","deletePortfolioComment","_ref3","delete","UserProfileAPI","getUserProfile","userProfileData","patchUserProfile","_ref4","name","profileImg","gitLink","blogLink","jobStatus","about","deleteUserProfile","UserPortfolioAPI","getUserPortfolio","userPortfoliosData","UserCommentsAPI","getUserComments","userCommentsData","getCommentsToPortfolio","commentsToPortfolioData","getCommentsToUser","commentsToUserData","deleteUserComment","userCommentId","UserCommentAPI"],"sources":["D:/Users/hoinlee/Desktop/HOIN/codestates/main-project/seb43_main_001/client/src/api/client.ts"],"sourcesContent":["// axios\r\nimport axios from 'axios';\r\n\r\n// util\r\nimport { getNewAccessToken } from '../utils/getAccessToken';\r\n\r\n// types\r\nimport {\r\n  GetPortfolioCommentById,\r\n  GetPortfolio,\r\n  PostPortfolioComment,\r\n  PatchPortfolioComment,\r\n  GetUserPortfolio,\r\n  GetUserProfile,\r\n  GetUserComment,\r\n  PatchUserProfile,\r\n  DeletePortfolioComment,\r\n} from '../types/index';\r\n\r\n// redux\r\nimport { loginState, access, refresh, setAccessToken } from '../store/slice/loginSlice';\r\nimport store from '../store';\r\n\r\n// ? 변수 선언 말고 바로 넣는 게 보안상 더 좋으려나?\r\n\r\nconst REFRESH_URL = ''; // refresh URL을 새롭게 추가를 해야 한다.\r\n// ! nontoken은 제외\r\nconst noneTokenClient = axios.create({ baseURL: process.env.REACT_APP_API_URL });\r\nconst tokenClient = axios.create({ baseURL: process.env.REACT_APP_API_URL });\r\n// *: 요청하는 상태에 따라서 무조건 토큰을 담아서 보낸다.\r\n\r\nconst isLogin = loginState(store.getState());\r\nconst accessToken = access(store.getState());\r\nconst refreshToken = refresh(store.getState());\r\n\r\ntokenClient.interceptors.request.use((config) => {\r\n  // * :요청 헤더가 있으면 기존의 것을 반환하고 없으면 아래 처럼 새롭게 지정해준다.\r\n  // !login 상태가 아니면 그냥 일반 헤더 반환\r\n  // !login 상태면 아래와 같이 그냥 진행\r\n  if (!config.headers || !isLogin) {\r\n    return config;\r\n  }\r\n  // REFRESH_URL 기준으로 분류 처리를\r\n  if (config.url === REFRESH_URL) {\r\n    config.headers.Authorization = `${accessToken}`;\r\n  } else {\r\n    config.headers.Authorization = `${refreshToken}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// *: token을 사용하는 response 설정\r\ntokenClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    // !판단 기준은 state.login에 토큰이 있냐 없냐로 판별해라\r\n    // !로그인을 안 했을 때의 401은 그냥 reject(Promise)를 반환해라!\r\n\r\n    // Login 상태가 아닐 때는 그냥 error을 반환하는 형식\r\n    if (!isLogin && error.response.status === 401) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // originalRequest._retry은 재시도 여부를 나타낸다(계속 요청하는 loop를 방지하기 위해)\r\n    if (error.response.status === 401 && originalRequest && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n\r\n      try {\r\n        // refreshToken을 이용해 새로운 accessToken 발급\r\n        const { accessToken } = await getNewAccessToken();\r\n\r\n        // 새롭게 발급 받은 accessToken을 로컬 스토리지에 저장하기\r\n        store.dispatch(setAccessToken(accessToken));\r\n\r\n        // *:새롭게 받은 accessToken을 다시 기존의 요청 헤더 권한에 부여\r\n        originalRequest.headers.authorization = `${accessToken}`;\r\n\r\n        // 실패했던 원래 요청에 대해 다시 요청을 보낸다.\r\n        return await axios(originalRequest);\r\n      } catch (error) {\r\n        // refreshToken으로 accessToken 발급을 실패한 경우\r\n        console.log('Error in getNewAccessToken: ', error);\r\n        // 로그아웃 처리 등의 작업을 한다. 발급 실패를 했으니 어떻게 해야 하나?\r\n        // 에러 페이지로 전환을 해야 할까?\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  },\r\n);\r\n\r\n// *: token을 사용하지 않는 response 설정\r\nnoneTokenClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    const errorResponse = {\r\n      ...error.response.data,\r\n    };\r\n\r\n    return Promise.reject(errorResponse);\r\n  },\r\n);\r\n\r\nexport const userAPI = {};\r\n\r\nexport const PortfolioAPI = {\r\n  getPortfolio: async (portfolioId: number): Promise<GetPortfolio> => {\r\n    const PortfolioData = await axios.get(\r\n      `${process.env.REACT_APP_API_URL}/portfolios/${portfolioId}`,\r\n    );\r\n    return PortfolioData.data.data;\r\n  },\r\n};\r\n\r\nexport const PortfolioCommentAPI = {\r\n  getPortfolioComment: async (portfolioId: number): Promise<GetPortfolioCommentById[]> => {\r\n    const commentData = await tokenClient.get(\r\n      `${process.env.REACT_APP_API_URL}/api/portfoliocomments/portfolios/${portfolioId}`,\r\n    );\r\n    return commentData.data.data;\r\n  },\r\n  postPortfolioComment: async ({ userId, portfolioId, content }: PostPortfolioComment) => {\r\n    return await tokenClient.post(`${process.env.REACT_APP_API_URL}/api/portfoliocomments`, {\r\n      userId,\r\n      portfolioId,\r\n      content,\r\n    });\r\n  },\r\n  patchPortfolioComment: async ({\r\n    portfolioCommentId,\r\n    userId,\r\n    portfolioId,\r\n    content,\r\n  }: PatchPortfolioComment) => {\r\n    return await tokenClient.patch(\r\n      `${process.env.REACT_APP_API_URL}/api/portfoliocomments/${portfolioCommentId}`,\r\n      {\r\n        portfolioCommentId,\r\n        userId,\r\n        portfolioId,\r\n        content,\r\n      },\r\n    );\r\n  },\r\n  deletePortfolioComment: async ({ portfolioCommentId }: DeletePortfolioComment) => {\r\n    return await tokenClient.delete(\r\n      `${process.env.REACT_APP_API_URL}/api/portfoliocomments/${portfolioCommentId}`,\r\n    );\r\n  },\r\n};\r\n\r\n// UserComponents\r\nexport const UserProfileAPI = {\r\n  getUserProfile: async (userId: number): Promise<GetUserProfile> => {\r\n    // ! : 실제 사용을 할 때는 /users/1/profile\r\n    const userProfileData = await tokenClient.get(\r\n      `${process.env.REACT_APP_API_URL}/users/${userId}/profile`,\r\n      // 'http://43.201.157.191:8080/users/1/profile',\r\n    );\r\n    console.log(userProfileData);\r\n    return userProfileData.data.data;\r\n  },\r\n  patchUserProfile: async ({\r\n    userId,\r\n    name,\r\n    profileImg,\r\n    gitLink,\r\n    blogLink,\r\n    jobStatus,\r\n    about,\r\n  }: PatchUserProfile) => {\r\n    // http://localhost:8080/users/1\r\n    await axios.patch(`${process.env.REACT_APP_API_URL}/users/${userId}`, {\r\n      name,\r\n      profileImg,\r\n      gitLink,\r\n      blogLink,\r\n      jobStatus,\r\n      about,\r\n    });\r\n  },\r\n  deleteUserProfile: async (userId: number) => {\r\n    await axios.delete(`${process.env.REACT_APP_API_URL}/users/${userId}`);\r\n  },\r\n};\r\n\r\nexport const UserPortfolioAPI = {\r\n  getUserPortfolio: async (userId: number): Promise<GetUserPortfolio[]> => {\r\n    // ! : 실제 작동할 때는 위 api 링크 사용\r\n    const userPortfoliosData = await tokenClient.get(\r\n      `${process.env.REACT_APP_API_URL}/users/${userId}/portfolio?page=1&size=15&order=asc&sort=createdAt`,\r\n      // `${process.env.REACT_APP_API_URL}/portfolio`,\r\n    );\r\n    return userPortfoliosData.data.data;\r\n  },\r\n};\r\n\r\nexport const UserCommentsAPI = {\r\n  getUserComments: async (userId: number): Promise<GetUserComment[]> => {\r\n    // http://localhost:8080/api/usercomments/users/1?page=1&size=10\r\n    const userCommentsData = await axios.get(\r\n      `${process.env.REACT_APP_API_URL}/api/usercomments/users/${userId}?page=1&size=10`,\r\n    );\r\n    return userCommentsData.data.data;\r\n  },\r\n  // * : 한 유저가 다른 사람의 포트폴리에 작성한 댓글\r\n  getCommentsToPortfolio: async (userId: number): Promise<GetUserComment[]> => {\r\n    // http://localhost:8080/api/portfoliocomments/users/1\r\n    const commentsToPortfolioData = await axios.get(\r\n      `${process.env.REACT_APP_API_URL}/api/portfoliocomments/users/${userId}`,\r\n    );\r\n    return commentsToPortfolioData.data.data;\r\n  },\r\n  // * : 한 유저가 다른 사람에게 작성한 댓글\r\n  getCommentsToUser: async (userId: number): Promise<GetUserComment[]> => {\r\n    // http://localhost:8080/api/usercomments/writers/2?page=1&size=10\r\n    const commentsToUserData = await axios.get(\r\n      `${process.env.REACT_APP_API_URL}/api/usercomments/writers/${userId}?page=1&size=10`,\r\n    );\r\n    return commentsToUserData.data.data;\r\n  },\r\n\r\n  // ! : 전달되는게 어떤 id값인지 확인 필요\r\n  deleteUserComment: async (userCommentId: number) => {\r\n    // http://localhost:8080/api/usercomments/1\r\n    await axios.delete(`${process.env.REACT_APP_API_URL}/api/usercomments/${userCommentId}`);\r\n  },\r\n  deletePortfolioComment: async (portfolioCommentId: number) => {\r\n    // http://localhost:8080/api/portfoliocomments/2\r\n    await axios.delete(\r\n      `${process.env.REACT_APP_API_URL}/api/portfoliocomments/${portfolioCommentId}`,\r\n    );\r\n  },\r\n};\r\n\r\nexport const UserCommentAPI = {};\r\n\r\nexport { tokenClient, noneTokenClient };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}