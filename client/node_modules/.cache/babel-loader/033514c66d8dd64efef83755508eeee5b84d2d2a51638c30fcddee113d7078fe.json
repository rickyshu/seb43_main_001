{"ast":null,"code":"var _s = $RefreshSig$();\n// axios\nimport axios from 'axios';\n\n// redux\nimport { useAppSelector } from '../hooks/reduxHook';\n\n// util\nimport { getRefreshToken } from '../utils/getRefreshToken';\n\n// types\n\n// ? 변수 선언 말고 바로 넣는 게 보안상 더 좋으려나?\n\nconst REFRESH_URL = ''; // refresh URL을 새롭게 추가를 해야 한다.\nconst noneTokenClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL\n});\nconst tokenClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL\n});\n\n// *: 요청하는 상태에 따라서 무조건 토큰을 담아서 보낸다.\n_s(tokenClient.interceptors.request.use(_s(config => {\n  _s();\n  // * :요청 헤더가 있으면 기존의 것을 반환하고 없으면 아래 처럼 새롭게 지정해준다.\n  if (!config.headers) return config;\n  if (config.url === REFRESH_URL) {\n    config.headers.Authorization = `${useAppSelector(state => state.login.refreshToken)}`;\n  } else {\n    config.headers.Authorization = `${useAppSelector(state => state.login.accessToken)}`;\n  }\n  return config;\n}, \"6vLuQ0A+Lpw7xt9bKHHGaX+BB5o=\", false, function () {\n  return [useAppSelector, useAppSelector];\n})), \"6vLuQ0A+Lpw7xt9bKHHGaX+BB5o=\", false, function () {\n  return [useAppSelector, useAppSelector];\n});\n\n// *: token을 사용하는 response 설정\ntokenClient.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const {\n    config,\n    response: {\n      status\n    }\n  } = error;\n  if (config.url === REFRESH_URL || status !== 401 || config.sent) {\n    return Promise.reject(error);\n  }\n  config.sent = true;\n  const accessToken = await getRefreshToken();\n  if (accessToken) {\n    config.headers.Authorization = `${accessToken}`;\n  }\n  return axios(config);\n});\n\n// *: token을 사용하지 않는 response 설정\nnoneTokenClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  const errorResponse = {\n    ...error.response.data\n  };\n  return Promise.reject(errorResponse);\n});\nexport const userAPI = {};\nexport const userProfile = {};\nexport const userPortfolios = {};\nexport const PortfolioAPI = {};\nexport const PortfoliosAPI = {};\nexport const PortfolioCommentAPI = {\n  getPortfolioComment: async portfolioId => {\n    const commentData = await axios.get(`${process.env.REACT_APP_API_URL}/api/portfoliocomments/portfolios/${portfolioId}`);\n    return commentData.data.data;\n  }\n};\nexport const UserCommentAPI = {};","map":{"version":3,"names":["axios","useAppSelector","getRefreshToken","REFRESH_URL","noneTokenClient","create","baseURL","process","env","REACT_APP_API_URL","tokenClient","_s","interceptors","request","use","config","headers","url","Authorization","state","login","refreshToken","accessToken","response","error","status","sent","Promise","reject","errorResponse","data","userAPI","userProfile","userPortfolios","PortfolioAPI","PortfoliosAPI","PortfolioCommentAPI","getPortfolioComment","portfolioId","commentData","get","UserCommentAPI"],"sources":["D:/Users/hoinlee/Desktop/HOIN/codestates/main-project/seb43_main_001/client/src/api/client.ts"],"sourcesContent":["// axios\r\nimport axios from 'axios';\r\n\r\n// redux\r\nimport { useAppSelector } from '../hooks/reduxHook';\r\n\r\n// util\r\nimport { getRefreshToken } from '../utils/getRefreshToken';\r\n\r\n// types\r\nimport { GetPortfolioCommentById } from '../types/index';\r\n\r\n// ? 변수 선언 말고 바로 넣는 게 보안상 더 좋으려나?\r\n\r\nconst REFRESH_URL = ''; // refresh URL을 새롭게 추가를 해야 한다.\r\nconst noneTokenClient = axios.create({ baseURL: process.env.REACT_APP_API_URL });\r\nconst tokenClient = axios.create({ baseURL: process.env.REACT_APP_API_URL });\r\n\r\n// *: 요청하는 상태에 따라서 무조건 토큰을 담아서 보낸다.\r\ntokenClient.interceptors.request.use((config) => {\r\n  // * :요청 헤더가 있으면 기존의 것을 반환하고 없으면 아래 처럼 새롭게 지정해준다.\r\n  if (!config.headers) return config;\r\n\r\n  if (config.url === REFRESH_URL) {\r\n    config.headers.Authorization = `${useAppSelector((state) => state.login.refreshToken)}`;\r\n  } else {\r\n    config.headers.Authorization = `${useAppSelector((state) => state.login.accessToken)}`;\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\n// *: token을 사용하는 response 설정\r\ntokenClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const {\r\n      config,\r\n      response: { status },\r\n    } = error;\r\n\r\n    if (config.url === REFRESH_URL || status !== 401 || config.sent) {\r\n      return Promise.reject(error);\r\n    }\r\n    config.sent = true;\r\n    const accessToken = await getRefreshToken();\r\n\r\n    if (accessToken) {\r\n      config.headers.Authorization = `${accessToken}`;\r\n    }\r\n\r\n    return axios(config);\r\n  },\r\n);\r\n\r\n// *: token을 사용하지 않는 response 설정\r\nnoneTokenClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    const errorResponse = {\r\n      ...error.response.data,\r\n    };\r\n\r\n    return Promise.reject(errorResponse);\r\n  },\r\n);\r\n\r\nexport const userAPI = {};\r\n\r\nexport const userProfile = {};\r\n\r\nexport const userPortfolios = {};\r\n\r\nexport const PortfolioAPI = {};\r\n\r\nexport const PortfoliosAPI = {};\r\n\r\nexport const PortfolioCommentAPI = {\r\n  getPortfolioComment: async (portfolioId: string): Promise<GetPortfolioCommentById[]> => {\r\n    const commentData = await axios.get(\r\n      `${process.env.REACT_APP_API_URL}/api/portfoliocomments/portfolios/${portfolioId}`,\r\n    );\r\n    return commentData.data.data;\r\n  },\r\n};\r\n\r\nexport const UserCommentAPI = {};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}