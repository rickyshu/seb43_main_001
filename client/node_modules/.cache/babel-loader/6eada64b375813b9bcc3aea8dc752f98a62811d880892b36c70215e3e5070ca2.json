{"ast":null,"code":"var _s = $RefreshSig$();\n// react-query\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\n// axios\n\n// typess\n\n// util\nimport { getUserIdFromAccessToken } from '../utils/getUserIdFromAccessToken';\n\n// redux\nimport { useAppSelector } from './reduxHook';\n\n// api\nimport { PortfolioCommentAPI } from '../api/client';\nconst {\n  postPortfolioComment\n} = PortfolioCommentAPI;\nexport const usePostPortfolioComment = () => {\n  _s();\n  const token = useAppSelector(state => state.login.accessToken);\n  const isLogin = useAppSelector(state => state.login.isLogin);\n  const userId = getUserIdFromAccessToken(isLogin, token);\n\n  // // !: URL Path 추가 확인 필요함!\n  // const PostCommentData = async ({ userId, portfolioId, content }: PostPortfolioComment) => {\n  //   return await axios.post(`${process.env.REACT_APP_API_URL}/api/portfoliocomments`, {\n  //     userId,\n  //     portfolioId,\n  //     content,\n  //   });\n  // };\n\n  const queryClient = useQueryClient();\n  const {\n    mutate: postComment\n  } = useMutation({\n    // 위 타입을 지정해줘야 함!\n    mutationFn: postPortfolioComment,\n    onSuccess: () => {\n      // * setData로 특정 id에 해당 하는 데이터 사전 처리도 가능할듯!\n      queryClient.invalidateQueries(['comment']);\n    },\n    onError: error => {\n      // *: error 헨들링 하기\n      console.log(error);\n    }\n  });\n  // 이래서 ref로 처리를 하는 것인가?(고민해본 결과 그냥 useState를 사용하는 것이 좋을 수도)\n  const postCommentAction = (portfolioId, content) => {\n    postComment({\n      userId,\n      portfolioId,\n      content\n    });\n  };\n  return {\n    postCommentAction\n  };\n};\n_s(usePostPortfolioComment, \"0a9DcKtPRpLx4vcWywlRT7C5GG4=\", false, function () {\n  return [useAppSelector, useAppSelector, useQueryClient, useMutation];\n});","map":{"version":3,"names":["useMutation","useQueryClient","getUserIdFromAccessToken","useAppSelector","PortfolioCommentAPI","postPortfolioComment","usePostPortfolioComment","_s","token","state","login","accessToken","isLogin","userId","queryClient","mutate","postComment","mutationFn","onSuccess","invalidateQueries","onError","error","console","log","postCommentAction","portfolioId","content"],"sources":["D:/Users/hoinlee/Desktop/HOIN/codestates/main-project/seb43_main_001/client/src/hooks/usePostPortfolioComment.ts"],"sourcesContent":["// react-query\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\r\n\r\n// axios\r\nimport axios from 'axios';\r\n\r\n// typess\r\nimport { PostPortfolioComment } from '../types/index';\r\n\r\n// util\r\nimport { getUserIdFromAccessToken } from '../utils/getUserIdFromAccessToken';\r\n\r\n// redux\r\nimport { useAppSelector } from './reduxHook';\r\n\r\n// api\r\nimport { PortfolioCommentAPI } from '../api/client';\r\n\r\nconst { postPortfolioComment } = PortfolioCommentAPI;\r\n\r\nexport const usePostPortfolioComment = () => {\r\n  const token = useAppSelector((state) => state.login.accessToken);\r\n  const isLogin = useAppSelector((state) => state.login.isLogin);\r\n\r\n  const userId = getUserIdFromAccessToken(isLogin, token);\r\n\r\n  // // !: URL Path 추가 확인 필요함!\r\n  // const PostCommentData = async ({ userId, portfolioId, content }: PostPortfolioComment) => {\r\n  //   return await axios.post(`${process.env.REACT_APP_API_URL}/api/portfoliocomments`, {\r\n  //     userId,\r\n  //     portfolioId,\r\n  //     content,\r\n  //   });\r\n  // };\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const { mutate: postComment } = useMutation({\r\n    // 위 타입을 지정해줘야 함!\r\n    mutationFn: postPortfolioComment,\r\n    onSuccess: () => {\r\n      // * setData로 특정 id에 해당 하는 데이터 사전 처리도 가능할듯!\r\n      queryClient.invalidateQueries(['comment']);\r\n    },\r\n    onError: (error) => {\r\n      // *: error 헨들링 하기\r\n      console.log(error);\r\n    },\r\n  });\r\n  // 이래서 ref로 처리를 하는 것인가?(고민해본 결과 그냥 useState를 사용하는 것이 좋을 수도)\r\n  const postCommentAction = (portfolioId: number, content: string) => {\r\n    postComment({ userId, portfolioId, content });\r\n  };\r\n  return { postCommentAction };\r\n};\r\n"],"mappings":";AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,uBAAuB;;AAEnE;;AAGA;;AAGA;AACA,SAASC,wBAAwB,QAAQ,mCAAmC;;AAE5E;AACA,SAASC,cAAc,QAAQ,aAAa;;AAE5C;AACA,SAASC,mBAAmB,QAAQ,eAAe;AAEnD,MAAM;EAAEC;AAAqB,CAAC,GAAGD,mBAAmB;AAEpD,OAAO,MAAME,uBAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3C,MAAMC,KAAK,GAAGL,cAAc,CAAEM,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACC,WAAW,CAAC;EAChE,MAAMC,OAAO,GAAGT,cAAc,CAAEM,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACE,OAAO,CAAC;EAE9D,MAAMC,MAAM,GAAGX,wBAAwB,CAACU,OAAO,EAAEJ,KAAK,CAAC;;EAEvD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMM,WAAW,GAAGb,cAAc,CAAC,CAAC;EAEpC,MAAM;IAAEc,MAAM,EAAEC;EAAY,CAAC,GAAGhB,WAAW,CAAC;IAC1C;IACAiB,UAAU,EAAEZ,oBAAoB;IAChCa,SAAS,EAAEA,CAAA,KAAM;MACf;MACAJ,WAAW,CAACK,iBAAiB,CAAC,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC;IACDC,OAAO,EAAGC,KAAK,IAAK;MAClB;MACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC,CAAC;EACF;EACA,MAAMG,iBAAiB,GAAGA,CAACC,WAAmB,EAAEC,OAAe,KAAK;IAClEV,WAAW,CAAC;MAAEH,MAAM;MAAEY,WAAW;MAAEC;IAAQ,CAAC,CAAC;EAC/C,CAAC;EACD,OAAO;IAAEF;EAAkB,CAAC;AAC9B,CAAC;AAACjB,EAAA,CAlCWD,uBAAuB;EAAA,QACpBH,cAAc,EACZA,cAAc,EAaVF,cAAc,EAEFD,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}