{"ast":null,"code":"var _s = $RefreshSig$();\n// react-query\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\n// axios\nimport axios from 'axios';\n\n// typess\n\n// util\nimport { getUserIdFromAccessToken } from '../utils/getUserIdFromAccessToken';\nexport const usePostPortfolioComment = () => {\n  _s();\n  // string | undefined을 가진다.\n  // 너가 문제이구나\n  const userId = getUserIdFromAccessToken();\n\n  // !: URL Path 추가 확인 필요함!\n  const PostCommentData = async _ref => {\n    let {\n      userId,\n      portfolioId,\n      content\n    } = _ref;\n    return await axios.post(`${process.env.REACT_APP_API_URL}/api/portfoliocomments`, {\n      userId,\n      portfolioId,\n      content\n    });\n  };\n  const queryClient = useQueryClient();\n  const {\n    mutate: postComment\n  } = useMutation({\n    // 위 타입을 지정해줘야 함!\n    mutationFn: PostCommentData,\n    onSuccess: () => {\n      // * setData로 특정 id에 해당 하는 데이터 사전 처리도 가능할듯!\n      queryClient.invalidateQueries(['comment']);\n    },\n    onError: error => {\n      // *: error 헨들링 하기\n      console.log(error);\n    }\n  });\n  // 이래서 ref로 처리를 하는 것인가?(고민해본 결과 그냥 useState를 사용하는 것이 좋을 수도)\n  const postCommentAction = (portfolioId, content) => {\n    postComment({\n      userId,\n      portfolioId,\n      content\n    });\n  };\n  return {\n    postCommentAction\n  };\n};\n_s(usePostPortfolioComment, \"O0BKodjUXSLmWYYptycM3DjlNes=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useMutation","useQueryClient","axios","getUserIdFromAccessToken","usePostPortfolioComment","_s","userId","PostCommentData","_ref","portfolioId","content","post","process","env","REACT_APP_API_URL","queryClient","mutate","postComment","mutationFn","onSuccess","invalidateQueries","onError","error","console","log","postCommentAction"],"sources":["D:/Users/hoinlee/Desktop/HOIN/codestates/main-project/seb43_main_001/client/src/hooks/usePostPortfolioComment.ts"],"sourcesContent":["// react-query\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\r\n\r\n// axios\r\nimport axios from 'axios';\r\n\r\n// typess\r\nimport { PostPortfolioComment } from '../types/index';\r\n\r\n// util\r\nimport { getUserIdFromAccessToken } from '../utils/getUserIdFromAccessToken';\r\n\r\nexport const usePostPortfolioComment = () => {\r\n  // string | undefined을 가진다.\r\n  // 너가 문제이구나\r\n  const userId = getUserIdFromAccessToken();\r\n\r\n  // !: URL Path 추가 확인 필요함!\r\n  const PostCommentData = async ({ userId, portfolioId, content }: PostPortfolioComment) => {\r\n    return await axios.post(`${process.env.REACT_APP_API_URL}/api/portfoliocomments`, {\r\n      userId,\r\n      portfolioId,\r\n      content,\r\n    });\r\n  };\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const { mutate: postComment } = useMutation({\r\n    // 위 타입을 지정해줘야 함!\r\n    mutationFn: PostCommentData,\r\n    onSuccess: () => {\r\n      // * setData로 특정 id에 해당 하는 데이터 사전 처리도 가능할듯!\r\n      queryClient.invalidateQueries(['comment']);\r\n    },\r\n    onError: (error) => {\r\n      // *: error 헨들링 하기\r\n      console.log(error);\r\n    },\r\n  });\r\n  // 이래서 ref로 처리를 하는 것인가?(고민해본 결과 그냥 useState를 사용하는 것이 좋을 수도)\r\n  const postCommentAction = (portfolioId: number, content: string) => {\r\n    postComment({ userId, portfolioId, content });\r\n  };\r\n  return { postCommentAction };\r\n};\r\n"],"mappings":";AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,uBAAuB;;AAEnE;AACA,OAAOC,KAAK,MAAM,OAAO;;AAEzB;;AAGA;AACA,SAASC,wBAAwB,QAAQ,mCAAmC;AAE5E,OAAO,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3C;EACA;EACA,MAAMC,MAAM,GAAGH,wBAAwB,CAAC,CAAC;;EAEzC;EACA,MAAMI,eAAe,GAAG,MAAAC,IAAA,IAAkE;IAAA,IAA3D;MAAEF,MAAM;MAAEG,WAAW;MAAEC;IAA8B,CAAC,GAAAF,IAAA;IACnF,OAAO,MAAMN,KAAK,CAACS,IAAI,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,wBAAuB,EAAE;MAChFR,MAAM;MACNG,WAAW;MACXC;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMK,WAAW,GAAGd,cAAc,CAAC,CAAC;EAEpC,MAAM;IAAEe,MAAM,EAAEC;EAAY,CAAC,GAAGjB,WAAW,CAAC;IAC1C;IACAkB,UAAU,EAAEX,eAAe;IAC3BY,SAAS,EAAEA,CAAA,KAAM;MACf;MACAJ,WAAW,CAACK,iBAAiB,CAAC,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC;IACDC,OAAO,EAAGC,KAAK,IAAK;MAClB;MACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC,CAAC;EACF;EACA,MAAMG,iBAAiB,GAAGA,CAAChB,WAAmB,EAAEC,OAAe,KAAK;IAClEO,WAAW,CAAC;MAAEX,MAAM;MAAEG,WAAW;MAAEC;IAAQ,CAAC,CAAC;EAC/C,CAAC;EACD,OAAO;IAAEe;EAAkB,CAAC;AAC9B,CAAC;AAACpB,EAAA,CAjCWD,uBAAuB;EAAA,QAcdH,cAAc,EAEFD,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}