{"ast":null,"code":"var _s = $RefreshSig$();\n// react-query\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\n// axios\nimport axios from 'axios';\nexport const usePostPortfolioComment = portfolioId => {\n  _s();\n  // !: URL Path 추가 확인 필요함!\n  const PostCommentData = async portfolioId => {\n    return await axios.post(`${process.env.REACT_APP_API_URL}/api/portfoliocomments/portfolios/${portfolioId}`);\n  };\n  const queryClient = useQueryClient();\n  const {\n    mutate\n  } = useMutation({\n    // 위 타입을 지정해줘야 함!\n    mutationFn: PostCommentData,\n    onSuccess: () => {\n      // * setData로 특정 id에 해당 하는 데이터 사전 처리도 가능할듯!\n      queryClient.invalidateQueries(['comment']);\n    },\n    onError: error => {\n      // *: error 헨들링 하기\n      console.log(error);\n    }\n  });\n  return {\n    mutate\n  };\n};\n_s(usePostPortfolioComment, \"QFZlXM8Sg2zRMrd4z8PQB1Yve2s=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useMutation","useQueryClient","axios","usePostPortfolioComment","portfolioId","_s","PostCommentData","post","process","env","REACT_APP_API_URL","queryClient","mutate","mutationFn","onSuccess","invalidateQueries","onError","error","console","log"],"sources":["D:/Users/hoinlee/Desktop/HOIN/codestates/main-project/seb43_main_001/client/src/hooks/usePostPortfolioComment.ts"],"sourcesContent":["// react-query\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\r\n\r\n// axios\r\nimport axios from 'axios';\r\n\r\nexport const usePostPortfolioComment = (portfolioId?: string) => {\r\n  // !: URL Path 추가 확인 필요함!\r\n  const PostCommentData = async (portfolioId?: string) => {\r\n    return await axios.post(\r\n      `${process.env.REACT_APP_API_URL}/api/portfoliocomments/portfolios/${portfolioId}`,\r\n    );\r\n  };\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const { mutate } = useMutation({\r\n    // 위 타입을 지정해줘야 함!\r\n    mutationFn: PostCommentData,\r\n    onSuccess: () => {\r\n      // * setData로 특정 id에 해당 하는 데이터 사전 처리도 가능할듯!\r\n      queryClient.invalidateQueries(['comment']);\r\n    },\r\n    onError: (error) => {\r\n      // *: error 헨들링 하기\r\n      console.log(error);\r\n    },\r\n  });\r\n  return { mutate };\r\n};\r\n"],"mappings":";AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,uBAAuB;;AAEnE;AACA,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,uBAAuB,GAAIC,WAAoB,IAAK;EAAAC,EAAA;EAC/D;EACA,MAAMC,eAAe,GAAG,MAAOF,WAAoB,IAAK;IACtD,OAAO,MAAMF,KAAK,CAACK,IAAI,CACpB,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,qCAAoCN,WAAY,EACnF,CAAC;EACH,CAAC;EAED,MAAMO,WAAW,GAAGV,cAAc,CAAC,CAAC;EAEpC,MAAM;IAAEW;EAAO,CAAC,GAAGZ,WAAW,CAAC;IAC7B;IACAa,UAAU,EAAEP,eAAe;IAC3BQ,SAAS,EAAEA,CAAA,KAAM;MACf;MACAH,WAAW,CAACI,iBAAiB,CAAC,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC;IACDC,OAAO,EAAGC,KAAK,IAAK;MAClB;MACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC,CAAC;EACF,OAAO;IAAEL;EAAO,CAAC;AACnB,CAAC;AAACP,EAAA,CAvBWF,uBAAuB;EAAA,QAQdF,cAAc,EAEfD,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}