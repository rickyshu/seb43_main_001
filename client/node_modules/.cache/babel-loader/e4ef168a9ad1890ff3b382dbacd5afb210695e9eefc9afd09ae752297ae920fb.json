{"ast":null,"code":"var _s = $RefreshSig$();\n// react-query\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\n// axios\nimport axios from 'axios';\n\n// typess\n\n// util\n\nexport const usePostPortfolioComment = (portfolioId, comments) => {\n  _s();\n  // 여기에서 userId를 가져온다.\n\n  // !: URL Path 추가 확인 필요함!\n  const PostCommentData = async _ref => {\n    let {\n      portfolioId,\n      postComment\n    } = _ref;\n    return await axios.post(`${process.env.REACT_APP_API_URL}/api/portfoliocomments/portfolios/${portfolioId}`, {\n      userId,\n      portfolioId,\n      content: comments\n    });\n  };\n  const queryClient = useQueryClient();\n  const {\n    mutate: postComment\n  } = useMutation({\n    // 위 타입을 지정해줘야 함!\n    mutationFn: PostCommentData,\n    onSuccess: () => {\n      // * setData로 특정 id에 해당 하는 데이터 사전 처리도 가능할듯!\n      queryClient.invalidateQueries(['comment']);\n    },\n    onError: error => {\n      // *: error 헨들링 하기\n      console.log(error);\n    }\n  });\n  // 이래서 ref로 처리를 하는 것인가?(고민해본 결과 그냥 useState를 사용하는 것이 좋을 수도)\n  const postCommentAction = comments => {\n    postComment();\n  };\n  return {\n    postComment,\n    postCommentAction\n  };\n};\n_s(usePostPortfolioComment, \"O0BKodjUXSLmWYYptycM3DjlNes=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useMutation","useQueryClient","axios","usePostPortfolioComment","portfolioId","comments","_s","PostCommentData","_ref","postComment","post","process","env","REACT_APP_API_URL","userId","content","queryClient","mutate","mutationFn","onSuccess","invalidateQueries","onError","error","console","log","postCommentAction"],"sources":["D:/Users/hoinlee/Desktop/HOIN/codestates/main-project/seb43_main_001/client/src/hooks/usePostPortfolioComment.ts"],"sourcesContent":["// react-query\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\r\n\r\n// axios\r\nimport axios from 'axios';\r\n\r\n// typess\r\nimport { PostPortfolioComment } from '../types/index';\r\n\r\n// util\r\nimport { getUserIdFromAccessToken } from '../utils/getUserIdFromAccessToken';\r\n\r\ntype usePostPortfolioCommentProps = {\r\n  portfolioId: string;\r\n  postComment: PostPortfolioComment;\r\n};\r\ntype PostPortfolioParams = {\r\n  portfolioId: string | undefined;\r\n  comments: string;\r\n};\r\n\r\nexport const usePostPortfolioComment = (portfolioId: string, comments: string) => {\r\n  // 여기에서 userId를 가져온다.\r\n\r\n  // !: URL Path 추가 확인 필요함!\r\n  const PostCommentData = async ({ portfolioId, postComment }: usePostPortfolioCommentProps) => {\r\n    return await axios.post(\r\n      `${process.env.REACT_APP_API_URL}/api/portfoliocomments/portfolios/${portfolioId}`,\r\n      {\r\n        userId,\r\n        portfolioId,\r\n        content: comments,\r\n      },\r\n    );\r\n  };\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const { mutate: postComment } = useMutation({\r\n    // 위 타입을 지정해줘야 함!\r\n    mutationFn: PostCommentData,\r\n    onSuccess: () => {\r\n      // * setData로 특정 id에 해당 하는 데이터 사전 처리도 가능할듯!\r\n      queryClient.invalidateQueries(['comment']);\r\n    },\r\n    onError: (error) => {\r\n      // *: error 헨들링 하기\r\n      console.log(error);\r\n    },\r\n  });\r\n  // 이래서 ref로 처리를 하는 것인가?(고민해본 결과 그냥 useState를 사용하는 것이 좋을 수도)\r\n  const postCommentAction = (comments: string) => {\r\n    postComment();\r\n  };\r\n  return { postComment, postCommentAction };\r\n};\r\n"],"mappings":";AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,uBAAuB;;AAEnE;AACA,OAAOC,KAAK,MAAM,OAAO;;AAEzB;;AAGA;;AAYA,OAAO,MAAMC,uBAAuB,GAAGA,CAACC,WAAmB,EAAEC,QAAgB,KAAK;EAAAC,EAAA;EAChF;;EAEA;EACA,MAAMC,eAAe,GAAG,MAAAC,IAAA,IAAsE;IAAA,IAA/D;MAAEJ,WAAW;MAAEK;IAA0C,CAAC,GAAAD,IAAA;IACvF,OAAO,MAAMN,KAAK,CAACQ,IAAI,CACpB,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,qCAAoCT,WAAY,EAAC,EAClF;MACEU,MAAM;MACNV,WAAW;MACXW,OAAO,EAAEV;IACX,CACF,CAAC;EACH,CAAC;EAED,MAAMW,WAAW,GAAGf,cAAc,CAAC,CAAC;EAEpC,MAAM;IAAEgB,MAAM,EAAER;EAAY,CAAC,GAAGT,WAAW,CAAC;IAC1C;IACAkB,UAAU,EAAEX,eAAe;IAC3BY,SAAS,EAAEA,CAAA,KAAM;MACf;MACAH,WAAW,CAACI,iBAAiB,CAAC,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC;IACDC,OAAO,EAAGC,KAAK,IAAK;MAClB;MACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC,CAAC;EACF;EACA,MAAMG,iBAAiB,GAAIpB,QAAgB,IAAK;IAC9CI,WAAW,CAAC,CAAC;EACf,CAAC;EACD,OAAO;IAAEA,WAAW;IAAEgB;EAAkB,CAAC;AAC3C,CAAC;AAACnB,EAAA,CAlCWH,uBAAuB;EAAA,QAedF,cAAc,EAEFD,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}